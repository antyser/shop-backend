# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script. You should put your scripts in ./cursor_scripts

## Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "gemini"
```

The LLM API supports multiple providers:
- Gemini (model: gemini-2.0-flash-exp)


But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
uv run ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
uv run ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- Use uv for package management, when needs to install package, run `uv add ...`
- Always use absolute import. The root directory is src import should be from package.file instead of src.package.file.
- Write docstring when create or update functions
- Each line should be less than 40 tokens
- Write the main script under if main, no need to create a main() function
- Use loguru logger instead of print
- Use descriptive variable names with auxiliary verbs (e.g., is_active, has_permission)
- Use lowercase with underscores for directories and files (e.g., routers/user_routes.py)

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- Use functional, declarative programming; avoid classes where possible
- Prefer iteration and modularization over code duplication
- Favor named exports for routes and utility functions
- Use the Receive an Object, Return an Object (RORO) pattern
- For FastAPI:
  - Use type hints for all function signatures
  - Prefer Pydantic models over raw dictionaries for input validation
  - Use Optional instead of | None
  - Use model_dump instead of dict() for Pydantic models
  - Always handle ValidationError and log the errors when loading Pydantic models
  - Follow the recommended FastAPI project structure:
    - Domain directories inside src folder
    - Separate router.py, models.py, db_models.py, service.py, etc.
    - Use dependencies.py for router dependencies
    - Implement proper error handling with custom exceptions
- Performance best practices:
  - Minimize blocking I/O operations
  - Use asynchronous operations for database and external API calls
  - Implement caching for static and frequently accessed data
  - Use lazy loading for large datasets
  - Handle errors and edge cases at the beginning of functions
  - Use early returns for error conditions
  - Place happy path last in functions

### Lessons:
- When using OpenRouter with tools, use Claude 3 Opus model as it has better tool support
- Other models like Gemini may not support function/tool calling through OpenRouter
- For simpler workflows, using raw OpenAI client can be more straightforward than using pydantic-ai tools
- Always use model_dump() to convert Pydantic models to dictionaries before JSON serialization
- Always validate LLM response fields before accessing them (choices, message, content)
- Use specialized crawlers for specific sites (e.g., Oxylabs universal scraper for Reddit)
- Implement caching for expensive operations like web scraping to improve performance
- Handle scraping errors gracefully and provide meaningful error messages
- When using external APIs, ensure proper parameter naming to avoid URL overwriting
- Save raw HTML for debugging and convert to markdown only when needed
- When working with external APIs, save raw responses for debugging schema issues
- Disable parsing in scrapers when raw HTML is needed